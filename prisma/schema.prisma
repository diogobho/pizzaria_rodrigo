generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  name      String
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Customer {
  id         String   @id @default(cuid())
  name       String
  phone      String   @unique
  address    String
  complement String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orders Order[]

  @@map("customers")
}

model DeliveryPerson {
  id        String   @id @default(cuid())
  name      String
  transport String
  phone     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("delivery_persons")
}

model Product {
  id            String  @id @default(cuid())
  name          String
  category      String
  price         Float
  inStock       Boolean @default(true)
  stockQuantity Int     @default(0)
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  orderItems OrderItem[]

  @@map("products")
}

model PizzaFlavor {
  id        String   @id @default(cuid())
  name      String   @unique
  category  String
  price     Float
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pizza_flavors")
}

model EsfihaFlavor {
  id        String   @id @default(cuid())
  name      String   @unique
  category  String
  price     Float
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("esfiha_flavors")
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       Int         @unique
  customerId        String
  deliveryPersonId  String?
  totalPrice        Float
  status            String      @default("nao-iniciado")
  observations      String?
  isScheduled       Boolean     @default(false)
  scheduledDateTime DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  customer       Customer        @relation(fields: [customerId], references: [id])
  deliveryPerson DeliveryPerson? @relation(fields: [deliveryPersonId], references: [id])
  items          OrderItem[]

  @@map("orders")
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String
  type         String
  productId    String?
  productName  String
  quantity     Int
  unitPrice    Float
  totalPrice   Float
  observations String?
  pizzaDetails Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("order_items")
}
